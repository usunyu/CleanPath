{"name":"ClearPath","tagline":"A new smart phone app helps navigate driving with an accurate travel time estimation","body":"[ClearPath](http://imsc.usc.edu/ClearPathNew/)\r\n==============================================\r\n\r\nA new smart phone app helps navigate driving with an accurate travel time estimation.\r\n\r\nTime and energy are the most important commodities of the 21st century â€“ and traffic congestion wastes both. Our mission is to help drivers find the best path to their destination and avoid unnecessary delays and expenses. We accomplish this by using \"predicted traffic patterns\" computed based on 3 years of historical traffic sensor data. Cleaparth also adjusts the predicted traffic patterns in real-time by taking into account the travel-delays caused by weather and accidents.\r\n\r\nClearpath is a spin-off company from University of Southern California. The technology behind ClearPath is a result of more than 10 years of research and protected by 3 patents.\r\n\r\nExperimental results show that Clearpath yields 18% travel-time savings over Google Map's paths, and travel - time accuracy is 92%. ClearPath received more than $2 million research funding in the last 3 years from variety of industry and federal agencies.\r\n\r\n###Navteq\r\n####Demo:\r\n\r\n![Pattern](images/pattern.jpg)\r\n\r\nThis is the pattern I created from the data of sensors I matched, I filled the missing data from near related sensor or history data. \r\n\r\n* Blue:\t\tspeed < 10\r\n* Red:\t\tspeed >= 10 && speed < 25\r\n* Yellow:\tspeed >= 25 && speed < 50\r\n* Green:\tspeed >= 50\r\n\r\n####Manual:\r\n#####1) CA GNDEMO Process:\r\n######In PatternGeneration Project:\r\n* input/CAInputFileGeneration\r\n* (Optional) output/CAOutputKMLGeneration to generate kml\r\n* pattern/CAAdjListPattern\r\n\r\n\r\n#####2) Clean Data Process:\r\n######In PatternGeneration Project:\r\n* input/InputFileGeneration\r\n\r\n\r\n          writeAverageCube\r\n          readAverageCube(i, 0);\r\n          changeInterval();\r\n          writeAverage15Cube(i, 0);\r\n          renameAverageFile(i, 0);\r\n\r\n     \r\n* process/DataClean\r\n* output/OutputDatabaseGeneration\r\n\r\n#####3) AdjList Create Process:\r\n######In ArterialPatternGeneration_shireesh Project:\r\n* GetAverageSpeedForArterials1to5New\r\n* GetAverageSpeedForHighways\r\n* CreateListForArterials1to5New\r\n* CreateListForHighways1to5New\r\n* CreateAdjList1to5New\r\n\r\n###OpenStreetMap\r\n\r\n####Demo:\r\n\r\n![OSM](images/osm.jpg)\r\n\r\nThis is map near our campus I fetched from OSM Project and converted it to our project's format. \r\nAnd I cleaned all the shape, building, barrier,etc which cannot be used for routing.\r\n\r\n#### Bidirectional Hierarchy Searching:\r\n#####1) Introduction:\r\n\r\n1. From source and destination to perform forward searching and reverse searching simultaneously.\r\n2. Forward searching is based on time dependent A* searching, but when it enter the highway, it will keep on highway.\r\n3. Reverse searching is based on lower bound A* searching, it will also keep on highway when it hit the highway entrance.\r\n4. When forward searching and reverse searching encounter on the highway, we will find a path.\r\n5. The mechanism of hierarchy(keep on highway) will reduce the searching space and lead to less response time.\r\n6. By the mechanism of bidirectional search, we do not worry about finding highway entrance and highway exit.\r\n\r\n#####2) A* searching vs BH searching\r\nChose two long distance nodes in Los Angeles and perform A* routing, Bidirectional Hierarchy routing and compare.\r\n<table>\r\n    <tr>\r\n        <td><b>Algorithm</b></td><td><b>Response Time</b></td><td><b>Search Space</b></td><td><b>Travel Cost</b></td>\r\n    </tr>\r\n    <tr>\r\n        <td>A*</td><td>1485 ms</td><td>291777 nodes</td><td>150 min</td>\r\n    </tr>\r\n    <tr>\r\n        <td>BH</td><td>225 ms</td><td>15204 nodes</td><td>150 min</td>\r\n    </tr>\r\n</table>\r\n\r\n![A*](images/astar.jpg)\r\n![BH](images/bh.jpg)\r\n![Not always optimal](images/not.jpg)\r\n\r\n#####3) Reference\r\n* [1] Sebastian Knopp, Peter Sanders, Dominik Schultes and Frank SchulzFast. Computation of Distance Tables using Highway Hierarchies, 2006.\r\n\r\n####Manual:\r\n\r\n#####1) put your \"map.osm\" in the \"file\" folder of the project\r\n\r\n#####2) osm2wkt/Osm2wkt\r\nthis step will get rid of the none-routable path, and please press \"N\" when it asked for fixCompleteness.\r\n* read the data from OSM file\r\n* get rid of unroutable data\r\n* generate xxx.wkts file\r\n\r\n#####3) controller/OSMInputFileGeneration\r\n* read the data from OSM file\r\n* generate xxx_node.csv and xxx_way.csv from data\r\n\r\n#####4) controller/OSMOutputFileGeneration\r\n* read the data from xxx_node.csv and xxx_way.csv\r\n* according xxx.wkts, overwrite xxx_node.csv and xxx_way.csv\r\n\r\n#####5) controller/OSMDivideWayToEdge\r\n* divide the long way to seperate edges based on intersect\r\n\r\n#####6) controller/OSMGenerateKML(Optional)\r\n* generate edge kml\r\n* generate node kml\r\n\r\n#####7) controller/OSMGenerateAdjList\r\n* generate xxx_adjlist.csv file\r\n\r\nAll the preprocessing steps (1~7) can be done in the controller/OSMGenerateAll.\r\n   \r\n#####8) controller/OSMRouting\r\n* using A* algorithm for path routing\r\n* using A* algorithm with fibonacci heap for path routing\r\n* using bidirectional hierarchy routing algorithm for path routing\r\n* show turn by turn information\r\n   \r\n#####9) test/CompareTdspTdspHTimeCost\r\n* compare the response time and cost time between A* algorithm and hierarchy routing algorithm\r\n\r\n#####10) test/AnalyzeTravelTimeMatrix\r\n* calculate the travel time based on matrix data","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}