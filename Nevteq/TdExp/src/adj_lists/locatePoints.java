package adj_lists;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.StringTokenizer;

public class locatePoints {

	/**
	 * @param args
	 */
	private static String findCoordinates(int node, String string){
		File nodes= new File (string);
		String line="";
		try {
			BufferedReader reader = new BufferedReader(new FileReader(nodes));
			int counter;
			for (counter=0;counter<node;counter++){
				reader.readLine();
			}
			line=reader.readLine();
			reader.close();
			

			
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return line;
	}
	
	
	public static void main(String[] args) {
		/*String path="17 16 23 24 22 18 19 20 21 25 26 27 30 29 33 39 41 44 45 52 53 55 58 98 97 104 103 102 101 66567 36961 36960 36959 36958 110267 128 127 146 170 185 203 209 213 217 219 240 238 239 223 224 247 290 292 311 359 358 425 570 591 619 640 652 662 56086 724 723 737 764 773 783 789 805 804 811 843 14954 14953 14955 83727 83726 83725 83724 14866 14970 14971 14972 14973 83718 83717 83716 14977 14976 14975 14974 14979 14978 14892 14894 14981 14984 14985 14987 14988 14989 14992 14907 14993 14994 103137 27426 27425 27428 27427 27429 27417 27468 27467 27470 27469 22313 22312 22311 22310 22309 22314 22315 22316 22317 22318 22319 22320 22321 23141 23142 23143 83057 23144 22899 23146 23147 23149 23148 23150 27373 27369 27355 23027 14457 14456 8502 8501 8503 8509 8508 8744 8730 9338 9349 9333 9332 9330 9331 97856 9356 97862 97861 97860 9368 14363 14364 96044 96043 96042 96041 70266 70265 70264 70263 70262 6068 96028 96027 96026 96025 96024 70272 70277 6089 96021 96020 96019 6102 85769 85768 6121 96016 96015 96014 96013 96012 96011 6140 72175 109941 96116 96004 6143 6147 98720 98719 6158 96000 95999 75135 6230 6231 74808 95996 6418 105328 95993 95992 95991 6433 95988 6427 95985 95984 95983 95982 95981 95980 95979 6480 74985 95974 95975 108538 108537 108535 108536 75138 69650 6491 6492 95969 95968 95966 95967 95970 70406 70407 6814 105322 105321 6808 6779 95962 6786 14140 60141 60140 60139 60137 60138 96228 96229 72184 93119 93118 93117 72182 105302 105300 105301 106561 106255 106538 106539 106249 106248 106247 104450 104436 104435 104433 104434 106726 106725 62033 62032 62031 62030 62029 62028 62027 62025 62026 62045 62047 62128 62127 106242 106243 106244 93071 62742 62740 62741 111301 106641 106853 106852 106851 106850 106849 106848 106151 106895 104456 104455 104454 104453 104452 103981 103982 106137 103980 103979 103978 103977 83301 106915 106913 106914 106935 106934 106933 106932 106931 105842 93063 93062 93061 93060 93059 93057 93058 111509 103123 103124 103661 103662 106275 103984 93036 64093 111510 105985 111514 106202 106201 106200 105972 105971 105381 105380 105378 105376 105377 105948 64483 64484 103078 105401 104533 106023 106024 106206 106205 106204 104470 104473 73628 73627 64965 64966 93031 82590 82589 82588 82586 82587 82592 89740 89739 89738 89737 89736 89735 89728 93995 89746 89745 65924 89747 89748 92629 92630 66058 92627 92625 92626 66224 66225 66351 66350 66348 66349 92620 92619 92618 82374 106283 92617 82382 82844 82420 82419 82417 82418 106442 105295 105294 57878 95405 95404 95402 95403 106285 58118 58117 58115 58116 66629 66628 66627 58163 58161 58162 82962 82541 82542 102847 102846 102845 86201 102848 102878 86244 102879 58280 58279 58278 58277 58274 58321 58322 94935 58511 58510 58508 58509 94940 58680 94941 58640 66565 66564 58690 94945 58880 94950 94949 94948 94947 58859 94954 94953 94951 94952 58931 74630 74631 94956 85618 59282 94961 59319 90421 90419 90420 91929 94963 59530 59526 72219 72218 72216 72217 73772 94970 91899 91898 91897 91896 91895 91894 91893 91892 91891 91890 91889 91888 91887 91886 91885 91884 91883 91882 91881 91880 91879 91878 91877 91875 91876 105560 105561 59874 95008 95007 95005 95006 60055 60054 60053 60052";
		path="17 16 23 24 22 18 19 20 21 25 26 27 30 29 33 39 41 44 45 52 53 55 58 106 120 71525 71524 71523 71522 71521 71520 71519 235 234 233 232 231 230 229 227 228 289 111318 111317 111316 111315 111314 111313 111312 111311 111310 111309 111308 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 377 99123 99122 99121 625 624 623 621 622 634 714 713 712 710 711 98990 105284 105285 98997 98996 98995 98994 98993 787 788 94924 94923 94922 834 94552 94550 94551 925 94566 94565 94564 94563 94561 94562 954 94567 944 945 946 947 948 105287 105288 105289 14880 14881 14882 14883 14864 14865 14848 14850 14851 14852 14853 20496 20497 20498 20499 20500 20475 20476 20477 20478 20479 82840 94468 95331 95332 20504 20555 20556 20557 20558 94462 94461 94460 94459 94458 22091 105124 105125 105126 94451 94452 94453 22046 94446 94442 94443 94444 94445 22100 22101 22102 94434 94435 94436 22147 94425 94426 94427 94424 22152 22153 22154 22155 22203 22202 22201 22200 22192 22923 22922 22921 22919 22920 94420 94419 94418 94417 94416 22924 94597 94596 94594 94595 71888 22888 22887 22886 22885 22884 22882 22883 105344 94605 94604 22838 22853 22852 22851 22842 22856 22857 22827 22826 22825 22819 94625 94662 94663 22807 94654 94653 94652 94651 94650 94649 94648 9337 97849 97848 9333 9332 9330 9331 97856 9356 97862 97861 97860 9368 14363 14364 96044 96043 96042 96041 70266 70265 70264 70263 70262 6068 96028 96027 96026 96025 96024 70272 70277 6089 96021 96020 96019 6102 85769 85768 6121 96016 96015 96014 96013 96012 96011 6140 72175 109941 96116 96004 6143 6147 98720 98719 6158 96000 95999 75135 6230 6231 74808 95996 6418 105328 95993 95992 95991 6433 95988 6427 95985 95984 95983 95982 95981 95980 95979 6480 74985 95974 95975 108538 108537 108535 108536 75138 69650 6491 6492 95969 95968 95966 95967 95970 70406 70407 6814 105322 105321 6808 6779 95962 6786 14140 60141 60140 60139 60137 60138 96228 96229 72184 93119 93118 93117 72182 105302 105300 105301 106561 106255 106538 106539 106249 106248 106247 104450 104436 104435 104433 104434 106726 106725 62033 106734 106733 106732 106731 106730 106729 106728 106727 66688 62126 62127 106242 106243 106244 93071 62742 106546 106544 106545 106645 106644 106643 106642 106640 106641 106853 106852 106851 106850 106849 106848 106151 106895 104456 104455 104454 104453 104452 103981 103982 106137 103980 103979 103978 103977 83301 106915 106913 106914 106935 106934 106933 106932 106931 105842 93063 93062 93061 93060 93059 93057 93058 111509 103123 103124 103661 103662 106275 103984 93036 64093 111510 105985 111514 106202 106201 106200 105972 105971 105381 105380 105378 105376 105377 105948 64483 64484 103078 105401 104533 106023 106024 106206 106205 106204 104470 104473 73628 73627 64965 64966 93031 82590 82589 82588 82586 82587 83351 83349 83350 89733 89732 89731 89729 89730 89734 92636 106272 106271 89750 89749 89748 92629 92630 66058 92627 92625 92626 66224 66225 66351 66350 66348 66349 92620 92619 92618 82374 106283 92617 82382 82844 82420 82419 82417 82418 106442 105295 105294 57878 95405 95404 95402 95403 106285 58118 58117 58115 58116 66629 66628 66627 58163 58161 58162 82962 82541 82542 102847 102846 102845 86201 102848 102878 86244 102879 58280 94934 94933 94932 94931 94930 58322 94935 58511 58510 58508 58509 94940 58680 94941 58640 66565 66564 58690 94945 58880 94950 94949 94948 94947 58859 94954 94953 94951 94952 58931 74630 74631 94956 85618 59282 94961 59319 90421 90419 90420 91929 94963 59530 91941 102543 102542 102541 102540 72217 73772 94970 91899 91898 91897 91896 91895 91894 91893 91892 91891 91890 91889 91888 91887 91886 91885 91884 91883 91882 91881 91880 91879 91878 91877 91875 91876 105560 105561 59874 95008 95007 95005 95006 60055 60054 60053 60052";
		StringTokenizer sT= new StringTokenizer(path," ");
		String toPrint="http://econym.org.uk/gmap/example_plotpoints.htm?";
		int counter=0;
		while(sT.hasMoreElements()){
			counter++;
			
			if ((counter%10)==1) {
				int nodeid=Integer.parseInt(sT.nextElement().toString());
				String node=findCoordinates(nodeid,"nodes.csv");
				String coord=node.substring(node.indexOf(",")+1);
				toPrint=toPrint.concat("q=@"+coord+"&");
			}
			else
				sT.nextElement();
		}
		System.out.print(toPrint);

	}
	*/
		String	static_path="17 16 23 24 22 18 19 20 21 25 26 27 30 29 33 39 41 44 45 52 53 55 58 98 97 104 103 102 101 66567 36961 36960 36959 36958 110267 128 127 146 170 185 203 209 213 217 219 240 238 239 223 224 247 290 292 311 359 358 425 570 591 619 640 652 662 56086 724 723 737 764 773 783 789 805 804 811 843 14954 14953 14955 83727 83726 83725 83724 14866 14970 14971 14972 14973 83718 83717 83716 14977 14976 14975 14974 14979 14978 14892 14894 14981 14984 14985 14987 14988 14989 14992 14907 14993 14994 103137 27426 27425 27428 27427 27429 27417 27468 27467 27470 27469 22313 22312 22311 22310 22309 22314 22315 22316 22317 22318 22319 22320 22321 23141 23142 23143 83057 23144 22899 23146 23147 23149 23148 23150 27373 27369 27355 23027 14457 14456 8502 8501 8503 8509 8508 8744 8730 9338 9349 9333 9332 9330 9331 97856 9356 97862 97861 97860 9368 14363 14364 96044 96043 96042 96041 70266 70265 70264 70263 70262 6068 96028 96027 96026 96025 96024 70272 70277 6089 96021 96020 96019 6102 85769 85768 6121 96016 96015 96014 96013 96012 96011 6140 72175 109941 96116 96004 6143 6147 98720 98719 6158 96000 95999 75135 6230 6231 74808 95996 6418 105328 95993 95992 95991 6433 95988 6427 95985 95984 95983 95982 95981 95980 95979 6480 74985 95974 95975 108538 108537 108535 108536 75138 69650 6491 6492 95969 95968 95966 95967 95970 70406 70407 6814 105322 105321 6808 6779 95962 6786 14140 60141 60140 60139 60137 60138 96228 96229 72184 93119 93118 93117 72182 105302 105300 105301 106561 106255 106538 106539 106249 106248 106247 104450 104436 104435 104433 104434 106726 106725 62033 62032 62031 62030 62029 62028 62027 62025 62026 62045 62047 62128 62127 106242 106243 106244 93071 62742 62740 62741 111301 106641 106853 106852 106851 106850 106849 106848 106151 106895 104456 104455 104454 104453 104452 103981 103982 106137 103980 103979 103978 103977 83301 106915 106913 106914 106935 106934 106933 106932 106931 105842 93063 93062 93061 93060 93059 93057 93058 111509 103123 103124 103661 103662 106275 103984 93036 64093 111510 105985 111514 106202 106201 106200 105972 105971 105381 105380 105378 105376 105377 105948 64483 64484 103078 105401 104533 106023 106024 106206 106205 106204 104470 104473 73628 73627 64965 64966 93031 82590 82589 82588 82586 82587 82592 89740 89739 89738 89737 89736 89735 89728 93995 89746 89745 65924 89747 89748 92629 92630 66058 92627 92625 92626 66224 66225 66351 66350 66348 66349 92620 92619 92618 82374 106283 92617 82382 82844 82420 82419 82417 82418 106442 105295 105294 57878 95405 95404 95402 95403 106285 58118 58117 58115 58116 66629 66628 66627 58163 58161 58162 82962 82541 82542 102847 102846 102845 86201 102848 102878 86244 102879 58280 58279 58278 58277 58274 58321 58322 94935 58511 58510 58508 58509 94940 58680 94941 58640 66565 66564 58690 94945 58880 94950 94949 94948 94947 58859 94954 94953 94951 94952 58931 74630 74631 94956 85618 59282 94961 59319 90421 90419 90420 91929 94963 59530 59526 72219 72218 72216 72217 73772 94970 91899 91898 91897 91896 91895 91894 91893 91892 91891 91890 91889 91888 91887 91886 91885 91884 91883 91882 91881 91880 91879 91878 91877 91875 91876 105560 105561 59874 95008 95007 95005 95006 60055 60054 60053 60052  ";
		String best_path = "17 16 23 24 22 18 19 20 21 28 32 37 43 48 75 74 126 139 140 168 189 212 279 344 553 552 551 550 549 545 546 547 548 98946 98947 372 373 374 71397 71396 71395 71394 71393 371 98979 98978 98977 98976 98975 98974 71388 71387 634 714 713 712 710 711 98990 105284 105285 98997 98996 98995 98994 98993 787 788 94924 94923 94922 834 94552 94550 94551 925 94566 94565 94564 94563 94561 94562 954 94567 944 945 946 947 948 105287 105288 105289 14880 14881 14882 14883 14864 14865 14848 14850 14851 14852 14853 20496 20497 20498 20499 20500 20475 20476 20477 20478 20479 82840 94468 95331 95332 20504 20503 20502 20501 15765 15764 15762 15763 94463 105346 105347 22026 22025 22023 22024 94588 94587 22037 22050 22051 22063 22065 22061 94620 94619 94618 94617 94616 94615 22079 75050 75049 75048 22082 22080 103177 109916 109915 109914 109913 109912 109911 22883 105344 94605 94604 22838 22853 22852 22851 22842 22856 22857 22827 22826 22825 22819 94625 94662 94663 22807 94654 94653 94652 94651 94650 94649 94648 9337 97849 97848 9333 9332 9330 9331 97856 9356 97862 97861 97860 9368 14363 14364 96044 96043 96042 96041 70266 70265 70264 70263 70262 6068 96028 96027 96026 96025 96024 70272 70277 6089 96021 96020 96019 6102 85769 85768 6121 96016 96015 96014 96013 96012 96011 6140 72175 109941 96116 96004 6143 6147 98720 98719 6158 96000 95999 75135 6230 6231 74808 95996 6418 105328 95993 95992 95991 6433 95988 6427 95985 95984 95983 95982 95981 95980 95979 6480 74985 95974 95975 108538 108537 108535 108536 75138 69650 6491 6492 95969 95968 95966 95967 95970 70406 70407 6814 105322 105321 6808 6779 95962 6786 14140 60141 60140 60139 60137 60138 96228 96229 72184 93119 93118 93117 72182 105302 105300 105301 106561 106255 106538 106539 106249 106248 106247 104450 104436 104435 104433 104434 106726 106725 62033 106734 106733 106732 106731 106730 106729 106728 106727 66688 62126 62127 106242 106243 106244 93071 62742 106546 106544 106545 106645 106644 106643 106642 106640 106641 106853 106852 106851 106850 106849 106848 106151 106895 104456 104455 104454 104453 104452 103981 103982 106137 103980 103979 103978 103977 83301 106915 106913 106914 106935 106934 106933 106932 106931 105842 93063 93062 93061 93060 93059 93057 93058 111509 103123 103124 103661 103662 106275 103984 93036 64093 111510 105985 111514 106202 106201 106200 105972 105971 105381 105380 105378 105376 105377 105948 64483 64484 103078 105401 104533 106023 106024 106206 106205 106204 104470 104473 73628 73627 64965 64966 93031 82590 82589 82588 82586 82587 83351 83349 83350 89733 89732 89731 89729 89730 89734 92636 106272 106271 89750 89749 89748 92629 92630 66058 92627 92625 92626 66224 66225 66351 66350 66348 66349 92620 92619 92618 82374 106283 92617 82382 82844 82420 82419 82417 82418 106442 105295 105294 57878 95405 95404 95402 95403 106285 58118 58117 58115 58116 66629 66628 66627 58163 58161 58162 82962 82541 82542 102847 102846 102845 86201 102848 102878 86244 102879 58280 94934 94933 94932 94931 94930 58322 94935 58511 58510 58508 58509 94940 58680 94941 58640 66565 66564 58690 94945 58880 94950 94949 94948 94947 58859 94954 94953 94951 94952 58931 74630 74631 94956 85618 59282 94961 59319 90421 90419 90420 91929 94963 59530 91941 102543 102542 102541 102540 72217 73772 94970 91899 91898 91897 91896 91895 91894 91893 91892 91891 91890 91889 91888 91887 91886 91885 91884 91883 91882 91881 91880 91879 91878 91877 91875 91876 105560 105561 59874 95008 95007 95005 95006 60055 60054 60053 60052 "; 

		
		StringTokenizer sT= new StringTokenizer(static_path," ");
		ArrayList <Pair<Double, Double>> gpsArray = new ArrayList<Pair<Double, Double>>();
		
		String toOutput = "";
		int count = 0;
		while (sT.hasMoreElements()){
			count++;
			int nodeid=Integer.parseInt(sT.nextElement().toString());
			String node = findCoordinates(nodeid,"nodes.csv");
			String coord = node.substring(node.indexOf(",")+1);
			
			double xCord = Double.parseDouble(coord.substring(0, coord.indexOf(',')));
			double yCord = Double.parseDouble(coord.substring(coord.indexOf(',')+1));
			gpsArray.add(new Pair(xCord, yCord));
			//System.out.println(xCord + " " + yCord);
		}
		
		String toPrint = "var gpsArray = new Array(" + gpsArray.size() + ");\n";
		toPrint += "for (var i = 0; i < gpsArray.length; i++)\n\tgpsArray[i] = new Array(2);\n\n";
		for (int i = 0; i < gpsArray.size(); i++){
			double xCord = gpsArray.get(i).getLeft();
			double yCord = gpsArray.get(i).getRight();
			//System.out.println(xCord + " " + yCord);
			toPrint += "gpsArray["+ i +"][0] = " + xCord + ";\n";
			toPrint += "gpsArray["+ i +"][1] = " + yCord + ";\n";
		}
		toPrint += "\nvar flightPlanCoordinates = new Array(gpsArray.length);\n";
		toPrint += "for (var i = 0; i < gpsArray.length; i++)\n\tflightPlanCoordinates[i] = new google.maps.LatLng(gpsArray[i][0], gpsArray[i][1]);";
		
		
		count = 0;
		sT= new StringTokenizer(best_path," ");
		gpsArray = new ArrayList<Pair<Double, Double>>();
		while (sT.hasMoreElements()){
			count++;
			int nodeid=Integer.parseInt(sT.nextElement().toString());
			String node = findCoordinates(nodeid,"nodes.csv");
			String coord = node.substring(node.indexOf(",")+1);
			
			double xCord = Double.parseDouble(coord.substring(0, coord.indexOf(',')));
			double yCord = Double.parseDouble(coord.substring(coord.indexOf(',')+1));
			gpsArray.add(new Pair(xCord, yCord));
			//System.out.println(xCord + " " + yCord);
		}
		
		toPrint += "\n\nvar otherArray = new Array(" + gpsArray.size() + ");\n";
		toPrint += "for (var i = 0; i < otherArray.length; i++)\n\totherArray[i] = new Array(2);\n\n";
		for (int i = 0; i < gpsArray.size(); i++){
			double xCord = gpsArray.get(i).getLeft();
			double yCord = gpsArray.get(i).getRight();
			//System.out.println(xCord + " " + yCord);
			toPrint += "otherArray["+ i +"][0] = " + xCord + ";\n";
			toPrint += "otherArray["+ i +"][1] = " + yCord + ";\n";
		}
		toPrint += "\nvar otherCoordinates = new Array(otherArray.length);\n";
		toPrint += "for (var i = 0; i < otherArray.length; i++)\n\totherCoordinates[i] = new google.maps.LatLng(otherArray[i][0], otherArray[i][1]);";
		
		
		/*String toPrint = "var gpsArray = new Array(" + gpsArray.size()
		
		var gpsArray = new Array(2);
		for (var i = 0; i < gpsArray.length; i++)
			gpsArray[i] = new Array(2);
			
		gpsArray[0][0] = 34;
		gpsArray[0][1] = -118;
		gpsArray[1][0] = 33;
		gpsArray[1][1] = -117;
		
        var flightPlanCoordinates = new Array(gpsArray.length);
	
		for (var i = 0; i < gpsArray.length; i++)
			flightPlanCoordinates[i] = new google.maps.LatLng(gpsArray[i][0], gpsArray[i][1]);	*/
		
		System.out.println(toPrint);
	}

}
